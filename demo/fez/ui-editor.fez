<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.11.1/styles/vs2015.min.css" />
</head>

<script>
  import hljs from 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/es/highlight.min.js';

  class {
    reformatIndentation(text) {
      const lines = text.split('\n');
      if (lines.length < 2) return text;

      let baseIndent = 0;
      for (let i = 1; i < lines.length; i++){
        const line = lines[i].trim();
        if (line.length > 0) {
          baseIndent = lines[i].match(/^\s*/)[0].length;
          break;
        }
      }

      const targetIndent = Math.max(0, baseIndent - 2);

      const processedLines = lines.map(line => {
        const lineWithSpaces = line.replace(/\t/g, '  ');
        const leadingSpaces = lineWithSpaces.match(/^\s*/)[0].length;
        if (leadingSpaces === 0) return line;
        const newIndent = Math.max(0, leadingSpaces - targetIndent);
        return ' '.repeat(newIndent) + lineWithSpaces.trim();
      });

      return processedLines.join('\n');
    }

    getSource() {
      return this.codeNode.textContent
    }

    async copy() {
      const text = this.getSource();

      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();

      try {
        const successful = document.execCommand('copy');
        if (successful) {
          Toast.info('File data copied to clipboard.');
        } else {
          throw new Error('Copy command failed');
        }
      } finally {
        textArea.remove();
      }
    }

    init(props) {
      props.language ||= 'html'

      if (props.src) {
        Fez.fetch(props.src, (r)=>{
          this.source = Fez.htmlEscape(r)
        })
      } else {
        const child = this.root.firstElementChild
        if (child?.nodeName == 'TEMPLATE' || child?.nodeName == 'XMP') {
          this.source = Fez.htmlEscape(this.root.firstElementChild.innerHTML)
        } else {
          this.source = this.root.innerHTML
        }
      }
    }

    onMount() {
      const node = this.codeNode = this.find('code')
      node.innerHTML = this.reformatIndentation( this.source.trim() )
      hljs.highlightElement(node)
    }
  }
</script>

<style>
  code {
    padding: 10px;
    font-size: 15px;
  }

  pre {
    margin-top: 20px;
    max-  width: 100%;
    line-height: 26px;
  }
</style>

{{#if props.file}}
  <div style="margin: 0; position: relative; top: 7px;">
    <a
      href="https://raw.githubusercontent.com/dux/fez/main/{{ props.file.replace('./', '') }}"
      target="raw"
    >{{ props.file }}</a>
    &sdot;
    <button class="btn-sm" onclick="fez.copy()">Copy</button>
    {{#if props.action }}
      &sdot;
      <button
        class="btn-sm"
        style="cursor: pointer; font-weight: 600;"
        onclick="fez.props.action('{{ props.name }}')"
      >Update</button>
    {{/if}}
  </div>
{{/if}}

<pre>
  <code class="language-{{ props.language }}" contenteditable="{{ !!props.file }}"></code>
</pre>
