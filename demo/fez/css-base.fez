<script>
  GLOBAL = true

  init() {
    // Check if styles already exist to avoid duplicates
    if (document.getElementById('generated-tailwind-like')) {
      return;
    }

    const css = [];

    const styles = {
      m:  'margin',
      mt: 'margin-top',
      mb: 'margin-bottom',
      ml: 'margin-left',
      mr: 'margin-right',
      p:  'padding',
      pt: 'padding-top',
      pb: 'padding-bottom',
      pl: 'padding-left',
      pr: 'padding-right'
    };

    for (let i = 0; i <= 50; i++) {
      const b = i * 4;

      // Base styles
      for (const [key, name] of Object.entries(styles)) {
        const bases = ['.', 'body.mobile .mobile-', 'body.desktop .desktop-'];
        for (const base of bases) {
          css.push(`${base}${key}-${i}   { ${name}: ${b}px; }`);
          css.push(`${base}${key}-${i}px { ${name}: ${i}px; }`);
        }
      }

      // Special x/y axis styles
      const bases = ['.', 'body.mobile .mobile-', 'body.desktop .desktop-'];
      for (const base of bases) {
        css.push(`${base}mx-${i}   { margin-left: ${b}px; margin-right: ${b}px; }`);
        css.push(`${base}mx-${i}px { margin-left: ${i}px; margin-right: ${i}px; }`);
        css.push(`${base}my-${i}   { margin-top: ${b}px; margin-bottom: ${b}px; }`);
        css.push(`${base}my-${i}px { margin-top: ${i}px; margin-bottom: ${i}px; }`);

        css.push(`${base}px-${i}   { padding-left: ${b}px; padding-right: ${b}px; }`);
        css.push(`${base}px-${i}px { padding-left: ${i}px; padding-right: ${i}px; }`);
        css.push(`${base}py-${i}   { padding-top: ${b}px; padding-bottom: ${b}px; }`);
        css.push(`${base}py-${i}px { padding-top: ${i}px; padding-bottom: ${i}px; }`);
      }

      // Position nudge styles
      css.push(`.top-${i}px    { position: relative; top: ${i}px; }`);
      css.push(`.bottom-${i}px { position: relative; top: -${i}px; }`);
      css.push(`.left-${i}px   { position: relative; left: ${i}px; }`);
      css.push(`.right-${i}px  { position: relative; left: -${i}px; }`);

      // Height styles
      css.push(`.mh-${i}   { min-height: ${b}px; }`);
      css.push(`.mh-${i}px { min-height: ${i}px; }`);

      // flex gap
      css.push(`.gap-${i}   { gap: ${b}px; }`);
      css.push(`.gap-${i}px { gap: ${i}px; }`);

      // flex col
      css.push(`.col-${i*10} { flex: 1; max-width: ${i*10}px; }`);

      css.push('');
    }

    // Create and insert style element
    const styleElement = document.createElement('style');
    styleElement.id = 'generated-tailwind-like';
    styleElement.innerHTML = css.join('\n');
    document.head.appendChild(styleElement);
  }
</script>

<style>
  body {
    .center { text-align: center; }
    .wrap { white-space: wrap;}
    .nowrap { white-space: nowrap;}

.flex {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  box-sizing: border-box;
  gap: 12px;

  & > .expand {
    flex: 1; /* Child with .expand grows to fill available space */
    box-sizing: border-box;
  }

  & > .no-grow {
    flex: 0 0 auto; /* Child with .no-grow does not grow beyond content */
    box-sizing: border-box;
  }

  &.even {
    flex-wrap: nowrap;
    width: 100%;
    flex-direction: row;

    & > * {
      flex: 1;
      box-sizing: border-box;
    }

    @media (max-width: 768px) {
      flex-direction: row;
      flex-wrap: wrap;
      overflow: hidden;

      & > * {
        flex: 0 0 100%;
        width: 100%;
        box-sizing: border-box;
        max-width: 100%;
      }
    }
  }

  &.top {
    align-items: flex-start;

    & > * {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      box-sizing: border-box;
    }
  }
}


  }
</style>
