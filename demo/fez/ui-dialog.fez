<script>
  // if GLOBAL is present, Fez engine
  // * on document load auto appends component to document
  // * after init() runs window[GLOBAL] = fez (mounted component)
  // this is singleton pattern
  GLOBAL = 'Dialog'

  close() {
    this.state.data = null
  }

  show(data, opts = {}) {
    this.state.class = opts.class || 'center'

    if (data) {
      if (data[0] == '#') {
        data = document.getElementById(data.replace('#', '')).innerHTML
      }

      this.state.data = data
    }
  }

  drawer(data, opts = {}) {
    opts.class = 'right'
    this.show(data, opts)
  }

  top(data, opts = {}) {
    opts.class = 'top'
    this.show(data, opts)
  }

  bottom(data, opts = {}) {
    opts.class = 'bottom'
    this.show(data, opts)
  }

  // Dialog.actionButton(true | false) -> enable | disable
  // Just add a button with class 'action-button'
  actionButton(value) {
    const button = this.find('.action-button')
    if (button) {
      if (value) {
        button.removeAttribute('disabled')
      } else {
        button.setAttribute('disabled', '')
      }
    }
  }

  testFunc(num) {
    if (window.Toast) {
      Toast.info(`Passed: ${num}`)
    }
  }

  init() {
    // for demo purposes, we subscribe to global event
    this.subscribe('clock-second', (val)=>{
      this.actionButton(val % 6 < 3)
    })

    // Add global escape key listener to close dialog
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.state.data) {
        // Don't close if user is typing in a form element
        const activeElement = document.activeElement
        const isInFormElement = activeElement && (
          activeElement.tagName === 'INPUT' ||
          activeElement.tagName === 'TEXTAREA' ||
          activeElement.tagName === 'SELECT' ||
          activeElement.isContentEditable
        )

        if (!isInFormElement) {
          this.close()
        }
      }
    })
  }
</script>

<style>
  .global-dialog {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;

    .dialog-content {
      background: white;
      border-radius: 8px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
      padding: 2rem;
      margin: 100px auto;
      max-width: 600px;
      max-height: calc(100vh - 200px);
      overflow-y: auto;
      position: relative;

      h1, h2 {
        margin-top: 0px;
        text-align: center;
      }

      &.center {
        transform: scale(0.8);
        opacity: 0;
        animation: fadeScaleIn 0.1s ease-out forwards;
      }

      &.top {
        position: absolute;
        top: 0;
        left: 50px;
        right: 50px;
        width: auto;
        max-width: none;
        margin: 0;
        min-height: 200px;
        border-radius: 0 0 8px 8px;
        transform: translateY(-100%);
        animation: slideInFromTop 0.3s ease-out forwards;
      }

      &.bottom {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        width: auto;
        max-width: none;
        margin: 0;
        min-height: 200px;
        border-radius: 0;
        transform: translateY(100%);
        animation: slideInFromBottom 0.3s ease-out forwards;
      }

      &.right {
        width: 400px;
        margin: 0 0 0 auto;
        height: 100vh;
        border-radius: 0;
        transform: translateX(100%);
        animation: slideInFromRight 0.2s ease-out forwards;
        max-height: 100vh;
      }
    }

    .dialog-close {
      position: absolute;
      top: 15px;
      right: 15px;
    }
  }

  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
    }
    to {
      transform: translateX(0);
    }
  }

  @keyframes fadeScaleIn {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes slideInFromTop {
    from {
      transform: translateY(-100%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes slideInFromBottom {
    from {
      transform: translateY(100%);
    }
    to {
      transform: translateY(0);
    }
  }
</style>

<div class="global-dialog" onclick="fez.close()" style="display: {{ state.data ? 'block' : 'none' }};">
  <div class="dialog-content {{ state.class }}" onclick="event.stopPropagation()">
    <ui-btn sm class="dialog-close" onclick="fez.close()">&times;</ui-btn>
    {{raw state.data }}
    <center style="padding-top: 30px;">
      <tmp-test-attr :func="fez.testFunc"></tmp-test-attr>
    </center>
  </div>
</div>
