<script>
  init(props) {
    // called when Fez node is connected to DOM
    this.MAX = 6
    this.state.count = parseInt(props.start || 0)
  }

  // called when local state changes
  onStateChange() {
    // lets look up for max count state in all counters
    let max = 0

    // loop only in components that read maxCount state
    Fez.state.forEach('maxCount', fez => {
      if (fez.state?.count > max) {
        max = fez.state.count
      }
    })

    // on global state key change
    // components reading the state will be auto re-rendered
    // no additional work needed
    this.globalState.maxCount = max
  }

  more() {
    // on any state change, component is re-rendered
    // on next browser animation frame
    this.state.count += this.isMax() ? 0 : 1
  }

  isMax() {
    return this.state.count >= this.MAX
  }
</script>

<style>
  /* compiles from scss to css and injects class in head */
  /* body style */
  background-color: #faf9f8;

  /* scoped to this component */
  :fez {
    margin: 10px 0;

    button {
      position: relative;
      margin: 1px;
      top: -3px;
    }

    span {
      padding: 5px 10px;
    }
  }
</style>

<!-- fez points to local fez component instance -->
<button class="btn-sm" onclick="fez.state.count -= 1" disabled={{ state.count < 1 }}>-</button>
<span>{{ state.count }}</span>
<button class="btn-sm" onclick="fez.more()" disabled={{ isMax() }}>+</button>

<span>&mdash;</span>
{{if state.count > 0}}
  {{if state.count == MAX }}
    MAX
  {{else}}
    {{if state.count % 2 }}
      odd
    {{else}}
      even
    {{/if}}
  {{/if}}
{{else}}
  zero
{{/if}}
<span>&mdash;</span>
(global max: {{ globalState.maxCount }})
