{
  "version": 3,
  "sources": ["../src/log.js"],
  "sourcesContent": ["// pretty print HTML\nconst LOG_PP = (html) => {\n  const parts = html\n    .split(/(<\\/?[^>]+>)/g)\n    .map(p => p.trim())\n    .filter(p => p);\n\n  let indent = 0;\n  const lines = [];\n\n  for (let i = 0; i < parts.length; i++) {\n    const part = parts[i];\n    const nextPart = parts[i + 1];\n    const nextNextPart = parts[i + 2];\n\n    // Check if it's a tag\n    if (part.startsWith('<')) {\n      // Check if this is an opening tag followed by text and then its closing tag\n      if (!part.startsWith('</') && !part.endsWith('/>') && nextPart && !nextPart.startsWith('<') && nextNextPart && nextNextPart.startsWith('</')) {\n        // Combine them on one line\n        const actualIndent = Math.max(0, indent);\n        lines.push('  '.repeat(actualIndent) + part + nextPart + nextNextPart);\n        i += 2; // Skip the next two parts\n      }\n      // Closing tag\n      else if (part.startsWith('</')) {\n        indent--;\n        const actualIndent = Math.max(0, indent);\n        lines.push('  '.repeat(actualIndent) + part);\n      }\n      // Self-closing tag\n      else if (part.endsWith('/>') || part.includes(' />')) {\n        const actualIndent = Math.max(0, indent);\n        lines.push('  '.repeat(actualIndent) + part);\n      }\n      // Opening tag\n      else {\n        const actualIndent = Math.max(0, indent);\n        lines.push('  '.repeat(actualIndent) + part);\n        indent++;\n      }\n    }\n    // Text node\n    else if (part) {\n      const actualIndent = Math.max(0, indent);\n      lines.push('  '.repeat(actualIndent) + part);\n    }\n  }\n\n  return lines.join('\\n');\n}\n\nconst LOG = (() => {\n  const logs = [];\n  const logTypes = []; // Track the original type of each log\n  let currentIndex = 0;\n\n  return o => {\n    if (!document.body) {\n      window.requestAnimationFrame( () => LOG(o) )\n      return\n    }\n\n    if (o instanceof Node) {\n      o = LOG_PP(o.outerHTML)\n    }\n\n    // Store the original type\n    let originalType = typeof o;\n\n    if (o === undefined) { o = 'undefined' }\n    if (o === null) { o = 'null' }\n\n    if (Array.isArray(o)) {\n      originalType = 'array';\n    } else if (typeof o === 'object' && o !== null) {\n      originalType = 'object';\n    }\n\n    if (typeof o != 'string') {\n      o = JSON.stringify(o, (key, value) => {\n        if (typeof value === 'function') {\n          return String(value);\n        }\n        return value;\n      }, 2).replaceAll('<', '&lt;')\n    }\n\n    o = o.trim()\n\n    logs.push(o + `\\n\\ntype: ${originalType}`);\n    logTypes.push(originalType);\n\n    let d = document.getElementById('dump-dialog');\n    if (!d) {\n      d = document.body.appendChild(document.createElement('div'));\n      d.id = 'dump-dialog';\n      d.style.cssText =\n        'position:fixed;top:30px;left:30px;right:50px;bottom:50px;' +\n        'background:#fff;border:1px solid#333;box-shadow:0 0 10px rgba(0,0,0,0.5);' +\n        'padding:20px;overflow:auto;z-index:9999;font:13px/1.4 monospace;white-space:pre';\n    }\n\n    // Check if we have a saved index and it's still valid\n    const savedIndex = parseInt(localStorage.getItem('_LOG_INDEX'));\n    if (!isNaN(savedIndex) && savedIndex >= 0 && savedIndex < logs.length) {\n      currentIndex = savedIndex;\n    } else {\n      currentIndex = logs.length - 1;\n    }\n\n    const renderContent = () => {\n      const buttons = logs.map((_, i) => {\n        let bgColor = '#f0f0f0'; // default\n        if (i !== currentIndex) {\n          if (logTypes[i] === 'object') {\n            bgColor = '#d6e3ef'; // super light blue\n          } else if (logTypes[i] === 'array') {\n            bgColor = '#d8d5ef'; // super light indigo\n          }\n        }\n        return `<button style=\"padding:4px 8px;margin:0;cursor:pointer;background:${i === currentIndex ? '#333' : bgColor};color:${i === currentIndex ? '#fff' : '#000'}\" data-index=\"${i}\">${i + 1}</button>`\n      }).join('');\n\n      d.innerHTML =\n        '<div style=\"display:flex;flex-direction:column;height:100%\">' +\n        '<div style=\"display:flex;justify-content:space-between;align-items:flex-start;margin-bottom:10px\">' +\n        '<div style=\"display:flex;flex-wrap:wrap;gap:4px;flex:1;margin-right:10px\">' + buttons + '</div>' +\n        '<button style=\"padding:4px 8px;cursor:pointer;flex-shrink:0\">&times;</button>' +\n        '</div>' +\n        '<xmp style=\"flex:1;overflow:auto;margin:0;padding:0;color:#000;background:#fff;font-size:14px;line-height:22px\">' + logs[currentIndex] + '</xmp>' +\n        '</div>';\n\n      d.querySelector('button[style*=\"flex-shrink:0\"]').onclick = () => d.remove();\n\n      d.querySelectorAll('button[data-index]').forEach(btn => {\n        btn.onclick = () => {\n          currentIndex = parseInt(btn.dataset.index);\n          localStorage.setItem('_LOG_INDEX', currentIndex);\n          renderContent();\n        };\n      });\n    };\n\n    renderContent();\n  };\n})();\n\nif (typeof window !== 'undefined') {\n  window.LOG = LOG\n  window.LOG_PP = LOG_PP\n}\n\nexport default LOG\n"],
  "mappings": "MACA,IAAMA,EAAUC,GAAS,CACvB,IAAMC,EAAQD,EACX,MAAM,eAAe,EACrB,IAAIE,GAAKA,EAAE,KAAK,CAAC,EACjB,OAAOA,GAAKA,CAAC,EAEZC,EAAS,EACPC,EAAQ,CAAC,EAEf,QAAS,EAAI,EAAG,EAAIH,EAAM,OAAQ,IAAK,CACrC,IAAMI,EAAOJ,EAAM,CAAC,EACdK,EAAWL,EAAM,EAAI,CAAC,EACtBM,EAAeN,EAAM,EAAI,CAAC,EAGhC,GAAII,EAAK,WAAW,GAAG,EAErB,GAAI,CAACA,EAAK,WAAW,IAAI,GAAK,CAACA,EAAK,SAAS,IAAI,GAAKC,GAAY,CAACA,EAAS,WAAW,GAAG,GAAKC,GAAgBA,EAAa,WAAW,IAAI,EAAG,CAE5I,IAAMC,EAAe,KAAK,IAAI,EAAGL,CAAM,EACvCC,EAAM,KAAK,KAAK,OAAOI,CAAY,EAAIH,EAAOC,EAAWC,CAAY,EACrE,GAAK,CACP,SAESF,EAAK,WAAW,IAAI,EAAG,CAC9BF,IACA,IAAMK,EAAe,KAAK,IAAI,EAAGL,CAAM,EACvCC,EAAM,KAAK,KAAK,OAAOI,CAAY,EAAIH,CAAI,CAC7C,SAESA,EAAK,SAAS,IAAI,GAAKA,EAAK,SAAS,KAAK,EAAG,CACpD,IAAMG,EAAe,KAAK,IAAI,EAAGL,CAAM,EACvCC,EAAM,KAAK,KAAK,OAAOI,CAAY,EAAIH,CAAI,CAC7C,KAEK,CACH,IAAMG,EAAe,KAAK,IAAI,EAAGL,CAAM,EACvCC,EAAM,KAAK,KAAK,OAAOI,CAAY,EAAIH,CAAI,EAC3CF,GACF,SAGOE,EAAM,CACb,IAAMG,EAAe,KAAK,IAAI,EAAGL,CAAM,EACvCC,EAAM,KAAK,KAAK,OAAOI,CAAY,EAAIH,CAAI,CAC7C,CACF,CAEA,OAAOD,EAAM,KAAK;AAAA,CAAI,CACxB,EAEMK,GAAO,IAAM,CACjB,IAAMC,EAAO,CAAC,EACRC,EAAW,CAAC,EACdC,EAAe,EAEnB,OAAOC,GAAK,CACV,GAAI,CAAC,SAAS,KAAM,CAClB,OAAO,sBAAuB,IAAMJ,EAAII,CAAC,CAAE,EAC3C,MACF,CAEIA,aAAa,OACfA,EAAId,EAAOc,EAAE,SAAS,GAIxB,IAAIC,EAAe,OAAOD,EAEtBA,IAAM,SAAaA,EAAI,aACvBA,IAAM,OAAQA,EAAI,QAElB,MAAM,QAAQA,CAAC,EACjBC,EAAe,QACN,OAAOD,GAAM,UAAYA,IAAM,OACxCC,EAAe,UAGb,OAAOD,GAAK,WACdA,EAAI,KAAK,UAAUA,EAAG,CAACE,EAAKC,IACtB,OAAOA,GAAU,WACZ,OAAOA,CAAK,EAEdA,EACN,CAAC,EAAE,WAAW,IAAK,MAAM,GAG9BH,EAAIA,EAAE,KAAK,EAEXH,EAAK,KAAKG,EAAI;AAAA;AAAA,QAAaC,CAAY,EAAE,EACzCH,EAAS,KAAKG,CAAY,EAE1B,IAAIG,EAAI,SAAS,eAAe,aAAa,EACxCA,IACHA,EAAI,SAAS,KAAK,YAAY,SAAS,cAAc,KAAK,CAAC,EAC3DA,EAAE,GAAK,cACPA,EAAE,MAAM,QACN,qNAMJ,IAAMC,EAAa,SAAS,aAAa,QAAQ,YAAY,CAAC,EAC1D,CAAC,MAAMA,CAAU,GAAKA,GAAc,GAAKA,EAAaR,EAAK,OAC7DE,EAAeM,EAEfN,EAAeF,EAAK,OAAS,EAG/B,IAAMS,EAAgB,IAAM,CAC1B,IAAMC,EAAUV,EAAK,IAAI,CAACW,EAAGC,IAAM,CACjC,IAAIC,EAAU,UACd,OAAID,IAAMV,IACJD,EAASW,CAAC,IAAM,SAClBC,EAAU,UACDZ,EAASW,CAAC,IAAM,UACzBC,EAAU,YAGP,qEAAqED,IAAMV,EAAe,OAASW,CAAO,UAAUD,IAAMV,EAAe,OAAS,MAAM,iBAAiBU,CAAC,KAAKA,EAAI,CAAC,WAC7L,CAAC,EAAE,KAAK,EAAE,EAEVL,EAAE,UACA,2OAE+EG,EAAU,4MAG4BV,EAAKE,CAAY,EAAI,eAG5IK,EAAE,cAAc,gCAAgC,EAAE,QAAU,IAAMA,EAAE,OAAO,EAE3EA,EAAE,iBAAiB,oBAAoB,EAAE,QAAQO,GAAO,CACtDA,EAAI,QAAU,IAAM,CAClBZ,EAAe,SAASY,EAAI,QAAQ,KAAK,EACzC,aAAa,QAAQ,aAAcZ,CAAY,EAC/CO,EAAc,CAChB,CACF,CAAC,CACH,EAEAA,EAAc,CAChB,CACF,GAAG,EAEC,OAAO,OAAW,MACpB,OAAO,IAAMV,EACb,OAAO,OAASV,GAGlB,IAAO0B,EAAQhB",
  "names": ["LOG_PP", "html", "parts", "p", "indent", "lines", "part", "nextPart", "nextNextPart", "actualIndent", "LOG", "logs", "logTypes", "currentIndex", "o", "originalType", "key", "value", "d", "savedIndex", "renderContent", "buttons", "_", "i", "bgColor", "btn", "log_default"]
}
