<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Test</title>
  <link rel="icon" href="./demo/fez.png">
  <link rel="stylesheet" href="./demo/main.css" />
  <script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
  <script src="./dist/fez.js"></script>
  <script>
    window.L = console.log
  </script>
</head>
<body>
  <img src="./demo/fez.png" style="height: 128px; float: right; margin-bottom: -100px;" />
  <h1>
    Fez demo components
    &sdot;
    <a target="playground" href="https://jsbin.com/nitihel/edit?html,output">playground</a>
    &sdot;
    <a target="repo" href="https://github.com/dux/fez">GitHub repo</a>
  </h1>

  <app-info small="Seller line generated by OpenAI o1">
    Fez is jQuery for web components - create Svelte/Vue like reactive components, directly in your HTML with zero build steps.
  </app-info>

  <app-info small="Seller line generated by Claude Sonet 3.5">
    jQuery taught us simplicity, we added Svelte's elegance, just drop in and code!
  </app-info>

  <p>Fez was created by <a href="https://github.com/dux/">@dux</a> in 2024.

  <h2>How FEZ feels and works?</h2>

  <p>Component model is similar to <code>Vue</code> or <code>Svelte</code>, but there is no compile step. You work on HTML doc as it is was allready monuted to root. Render pages from server, and just use custom HTML tags you have created, as you would use any other HTML tag.</p>

  <ul>
    <li>üîå <i>Native Browser Components:</i> Uses standard <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements">custom elements</a>. Create tags like <code>&lt;ui-clock&gt;</code>, place them anywhere in your HTML, and they just work. (Try it now in dev tools - instant magic!)</li>
    <li>‚ö° <i>Zero Build Step Hassle:</i> Works directly in the browser with a tiny runtime (20kb raw, 6kb zipped - smaller than most cat GIFs).</li>
    <li>üîÑ <i>Smart State Management:</i> Automatically re-renders components using <a href="https://github.com/bigskysoftware/idiomorph">Idiomorph</a> for efficient DOM updates when data changes.</li>
    <li>üìú <i>Flexible Templating:</i> Choose between HTML-like templates (similar to <a href="https://dev.to/cloudcannon/templating-in-sveltekit-3ikm">Svelte</a>) or programmatic <a href="https://github.com/dux/fez/blob/main/src/vendor/n.js">node building</a>.</li>
    <li>üé® <i>CSS Superpowers:</i> Built-in SCSS support via <a href="https://goober.js.org/">Goober</a> with scoped/global styles and dynamic values.</li>
    <li>ü§ù <i>Familiar Syntax:</i> Supports Svelte-style <code>use</code>/<code>bind</code> and Vue-like <code>:attribute</code> bindings.</li>
    <li>üí° <i>Stateful Slots:</i> Preserves slot content state during re-renders - form inputs stay filled, components keep their data.</li>
    <li>üì° <i>Component Communication:</i> Straightforward parent-child interactions without complex state management.</li>
    <li>üîî <i>Event System:</i> Built-in pub/sub pattern for cross-component messaging.</li>
    <li>‚è≥ <i>Lifecycle Control:</i> Hooks like <code>onMount</code>, <code>beforeRender</code>, and <code>onPropsChange</code> for precise timing.</li>
  </ul>

  <h2>How to build your first component</h2>

  <p>Lets build simple counter</p>

  <ol>
    <li>Add Fez JS (to HEAD)
      <xmp>
<script src="https://dux.github.io/fez/dist/fez.js"></script>
      </xmp>
    </li>
    <li>
      Create ex-counter component

      <xmp id="demo-counter">
<template fez="ex-counter">
  <script>
    connect() {
      this.state.count = 0
    }

    more() {
      this.state.count += this.state.count > 9 ? 0 : 1
    }
  </script>

  <style>
    span {
      margin: 0 10px;
      color: blue;
    }
  </style>

  <button onclick="@state.count -= 1">-</button>
  <span>
    {{ @state.count }}
  </span>
  <button onclick="@more()">+</button>
  {{#if @state.count > 0}}
    <span>&mdash;</span>
    {{#if @state.count % 2 }} odd {{:else}} even {{/if}}
  {{/if}}
</template>

      </xmp>
<template fez="ex-counter">
  <script>
    connect() {
      this.state.count = 0
    }

    more() {
      this.state.count += this.state.count > 9 ? 0 : 1
    }
  </script>

  <style>
    span {
      margin: 0 10px;
      color: blue;
    }
  </style>

  <button onclick="@state.count -= 1">-</button>
  <span>
    {{ @state.count }}
  </span>
  <button onclick="@more()">+</button>
  {{#if @state.count > 0}}
    <span>&mdash;</span>
    {{#if @state.count % 2 }} odd {{:else}} even {{/if}}
  {{/if}}
</template>

    </li>
    <li>
      Place ex-counter anywhere in BODY
      <xmp>
<ex-counter></ex-counter>
      </xmp>
    </li>
    <li>
      <p>That is it! Edit this demo on <a target="codepen" href="https://jsbin.com/nitihel/edit?html,output">CodePen</a></p>
      <ex-counter id="main-counter"></ex-counter>
    </li>
  </ol>

  <template fez="app-info">
  <style>
    & > div {
      border: 3px solid #bb8;
      padding: 10px;
      border-radius: 8px;
      background-color: #ffe;
      margin-bottom: 16px;
    }
  </style>

  <div>
    {{#if @props.small}}
      <p>
        <small>{{ @props.small }}</small>
      </p>
    {{/if}}

    <slot />
  </div>
</template>


  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-avatar</h2>

    <div id="body-avatar" style="padding-bottom: 20px;">
      <style>
  .avatars {
    img.avatar {
      border: 2px solid #ddd;
      background-color: #fff;
      margin-right: -10px;
    }
  }
</style>

<div class="avatars">
  <ui-avatar src="https://robohash.org/a.png" name="Dux"></ui-avatar>
  <ui-avatar src="https://robohash.org/b.png" name="Mile"></ui-avatar>
  <ui-avatar src="https://robohash.org/c.png?set=set2"></ui-avatar>
  <ui-avatar src="https://robohash.org/d.png?set=set2"></ui-avatar>
  <ui-avatar src="https://robohash.org/e.png" name="Joza"></ui-avatar>
</div>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>features blocks <code>{{#block ...}}</code></li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="avatar"
          id="html-avatar"
          file="./demo/tpl/avatar.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-avatar"
          file="./demo/tpl/avatar.fez"
          name="avatar"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-border</h2>

    <div id="body-border" style="padding-bottom: 20px;">
      <div class="should-be-first-parent">
  <ui-border color="violet">
    <div style="padding: 20px; max-width: 200px;">
      this will get border from fez component. Also check the DOM, fez parent is removed from DOM.
    </div>
  </ui-border>
</div>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>internal method <code>this.fezHide()</code> will remove fez node from dom, and set <code>this.root</code> to first parent node and return initial child nodes.</li>
    <li>useful if you need to transform children, but you can't have parent node in place. Think jQuery plugin.</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="border"
          id="html-border"
          file="./demo/tpl/border.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-border"
          file="./demo/tpl/border.fez"
          name="border"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-clock</h2>

    <div id="body-clock" style="padding-bottom: 20px;">
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
  <div>
    <ui-clock city="Zageb" utc="1"></ui-clock>
  </div>
  <div>
    <ui-clock city="Moscow" utc="4"></ui-clock>
  </div>
  <div>
    <ui-clock city="NYC" utc="-5"></ui-clock>
  </div>
  <div>
    <ui-clock city="Mumbai" utc="5.5"></ui-clock>
  </div>
  <div>
    <ui-clock city="Sydney" utc="10"></ui-clock>
  </div>
</div>




    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>SVG generation</li>
    <li>reactive store - any update to <code>this.state</code> object triggers re-render.</li>
    <li>DOM morph updates - update only changed nodes and attributes</li>
    <li>dynamic styes (seconds line color)</li>
    <li><code>onDestroy() { ... }</code> - execute code when component is removed from DOM</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="clock"
          id="html-clock"
          file="./demo/tpl/clock.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-clock"
          file="./demo/tpl/clock.fez"
          name="clock"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-editor</h2>

    <div id="body-editor" style="padding-bottom: 20px;">
      <ui-editor>
    Hi
</ui-editor>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>this is viewer / editor you see on the right</li>
    <li>Featuring <code>Fez.head(...)</code> that will safely insert script tags in the page header</li>
    <li>Featuring <code>Fez.untilTrue(...)</code> that will execute code every 100 miliseconds until it returns true</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="editor"
          id="html-editor"
          file="./demo/tpl/editor.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-editor"
          file="./demo/tpl/editor.fez"
          name="editor"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-form</h2>

    <div id="body-form" style="padding-bottom: 20px;">
      <div class="flex">
  <ui-form target="/api" :ping="updateFormData">
    <p>
      <input type="text" name="info" value="a dude" />
    </p>
    <p>
      <select name="num">
        <option>one</option>
        <option>two</option>
        <option>three</option>
      </select>
    </p>
    <p>
      <label><input type="radio" name="name" value="Jakov" /> Jakov</label>
      <label><input type="radio" name="name" value="Vid" /> Vid</label>
      <label><input type="radio" name="name" value="Dino" /> Dino</label>
    </p>
    <p>
      <button>Submit</button>
    </p>
  </ui-form>

  <ui-form target="/api" :ping="updateFormData">
    <p>
      <select name="num">
        <option>uno</option>
        <option>due</option>
        <option>tres</option>
      </select>
    </p>
    <p>
      <button>Submit</button>
    </p>
  </ui-form>
</div>

<pre id="form-data"></pre>

<script>
  function updateFormData(obj) {
    $('#form-data').append(JSON.stringify(obj) + "\n")
  }
</script>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>form helper - <code>this.formData()</code>. Get form data as object.</li>
    <li>form helper - <code>this.onSubmit()</code>. If present, auto bind form and get form data as object</li>
    <li>prefix params with <code>:</code> if you want to calculate attribute value. Same as in Vue, current example <code>:ping="..."</code></li>
    <li>Custom DOM tag name - <code>FORM</code> instead of default <code>DIV</code></li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="form"
          id="html-form"
          file="./demo/tpl/form.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-form"
          file="./demo/tpl/form.fez"
          name="form"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-icon</h2>

    <div id="body-icon" style="padding-bottom: 20px;">
      <input
  type="range" min="24" max="100" class="slider" id="icon-range"
  oninput="Fez('#icon-blue').setSize(this.value)"
/>

&sdot;

<span onclick="Fez('#icon-blue').attr('color', $(event.target).text())">
  <button>red</button>
  <button>blue</button>
  <button>green</button>
</span>

<br /><br />

<ui-icon name="home"></ui-icon>
<ui-icon
  id="icon-blue"
  name="settings"
  color="blue"
  onclick="alert(this.fez.props.color)"
  :size="document.getElementById('icon-range').value"
></ui-icon>
<ui-icon color="red">delete</ui-icon>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>Features component to component communication</li>
    <li>evalule value of a attribute if prefixed with column <code>:</code> (in this example <code>:size=</code></li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="icon"
          id="html-icon"
          file="./demo/tpl/icon.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-icon"
          file="./demo/tpl/icon.fez"
          name="icon"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-slider</h2>

    <div id="body-slider" style="padding-bottom: 20px;">
      <style>
  .fez-c-slider {
    .fez-slot {
      > div {
         text-align: center;
      }
    }
  }

  div.img {
    img {
      width: 100%;
      max-height: 600px;
      object-fit: cover;
      border-radius: 8px;
    }
  }
</style>

<ui-slider>
  <div>
    <h1>Side 1</h1>
    <div class="img">
      <img src="https://images.unsplash.com/photo-1737143765999-bd3be790ab4f?w=600" />
     </div>
  </div>
  <div>
    <h1>Side 2</h1>
    <div class="img flex">
      <img src="https://images.unsplash.com/photo-1735767975829-71496633d499?w=600" />
      <img src="https://images.unsplash.com/photo-1736158064402-5b68c2cbcc77?w=600" />
    </div>
    <div style="width: 200px;  margin: 20px auto;">
      <ui-clock city="Slider!"></ui-clock>
    </div>
  </div>
  <div>
    <h1>Side 3</h1>
    <div class="img">
      <img src="https://images.unsplash.com/photo-1737898415581-7dea57a1905b?w=600" />
     </div>
  </div>
  <div>
    <h1>Side 4</h1>
    <div class="img">
      <img src="https://images.unsplash.com/photo-1736158064402-5b68c2cbcc77?w=600" />
    </div>
    <ul>
      <li>Add any HTML</li>
    </ul>
  </div>
  <div>
    <h1>Side 5</h1>
    <div class="img">
      <img src="https://images.unsplash.com/photo-1736185669686-f302d6274f23?w=600" />
    </div>
  </div>
</ui-slider>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>sweet component with css animations :)</li>
    <li><code>beforeRender()</code> to prepare vars before render (clean alternative to svelte <code>$: {...}</code></li>
    <li><code>this.setInterval()</code> to set interval on a instance. No need to clear it, it will be auto cleared on component destroy.</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="slider"
          id="html-slider"
          file="./demo/tpl/slider.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-slider"
          file="./demo/tpl/slider.fez"
          name="slider"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-tabs</h2>

    <div id="body-tabs" style="padding-bottom: 20px;">
      <ui-tabs>
  <div title="Bar">
    <p>First tab</p>

    <br />

    <ui-tabs>
      <div title="Foo nested 2">First tab</div>
      <div title="Bar">
        <p>second tab</p>

        <ui-tabs>
          <div title="Foo nested 3">first tab</div>
          <div title="Bar nested 3">
            <p>second tab</p>
            <hr />
            <ui-clock></ui-clock>
          </div>
        </ui-tabs>
      </div>
    </ui-tabs>
  </div>
  <div title="Baz">
    <h4>image tab</h4>
    <img src="./demo/fez.png" />
  </div>
  <div title="Foo">
    Third tab
    <hr />
    <ui-clock></ui-clock>
  </div>
</ui-tabs>


    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>alternative node builder</li>
    <li>nested and recursive components (tabs in tabs in tabs)</li>
    <li><code>this.childNodes()</code> FEZ instance helper function, get all first level child nodes, excluding #text nodes.</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="tabs"
          id="html-tabs"
          file="./demo/tpl/tabs.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-tabs"
          file="./demo/tpl/tabs.fez"
          name="tabs"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-time</h2>

    <div id="body-time" style="padding-bottom: 20px;">
      <ui-time city="Zagreb">
  <ul>
    <li>
      Slot state preservation demo: &nbsp;
      <b class="color-name"></b>
    </li>
  </ul>
</ui-time>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>slots</li>
    <li>slot preservation on re-render</li>
    <li>
      global and local css. If <code>:fez { ... }</code> is present, anything inside is local, anythig outside is global.
      If no class <code>:fez</code> is present, style is considered local.
      </li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="time"
          id="html-time"
          file="./demo/tpl/time.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-time"
          file="./demo/tpl/time.fez"
          name="time"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  
    <div class="flex" style="border-top: 1px solid #ccc; margin-bottom: 50px;">
  <div style="margin-top: 10px;">
    <h2 style="margin-top: 0;">Demo: ui-todo</h2>

    <div id="body-todo" style="padding-bottom: 20px;">
      <ui-todo></ui-todo>

    </div>
  </div>
  <div style="margin-top: 20px;">
    <ui-tabs>
      <div title="Info" active="true">
        <div class="info">
  <ul>
    <li>fully <b>rective state</b></li>
    <li><b>fez-bind</b> - two way binding of input element</li>
    <li><b>fez-use</b> - when node is added to dom, call described function and pass node as reference (inspired by Svelte)</li>
  </ul>
</div>
      </div>
      <div title="HTML">
        <ui-editor
          name="todo"
          id="html-todo"
          file="./demo/tpl/todo.html"
          language="html"
          :action="applyChanges"
        >
          222
        </ui-editor>
      </div>
      <div title="Fez component">
        <ui-editor
          id="code-ui-todo"
          file="./demo/tpl/todo.fez"
          name="todo"
          :action="applyChanges"
        >
          
        </ui-editor>
      </div>
    </ui-tabs>
  </div>
</div>

  

  <script>
    window.applyChanges = function(name) {
      Fez.compile(`ui-${name}`, Fez(`#code-ui-${name}`).getSource())

      $(`#body-${name}`).html( Fez(`#html-${name}`).getSource() )
    }
  </script>
</body>
</html>

